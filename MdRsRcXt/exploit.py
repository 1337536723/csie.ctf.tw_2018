import hashlib
import sys
import binascii
import struct
import functools
import math

def md5(s):
    return hashlib.md5(s.encode('ascii')).hexdigest()

a = int('''
d3d36115599d53eeb0413c3a818e120bc1ce4cc9bca9e7b23a695a150c056c4a
6ca2e3ce99efe8a0f4385e86e8897d2e47bd25a45e723b768af040e2b6d73beb
193fb86aae849513463e3a794768ab865b4b82bd5df627e83afdfc0ee00bc983
2e6c38e53d2812a344ff34008198e142e642c95a449a762d7fd30df018fa5fe6
53c882a192d011594a29a0926fe841473622a61e41ac0f675f5fda76a27561ff
c7c90c6d85464f23fab9e88bfca8ed5a0f2e0e11c0a0f4521e1919194e868d18
c0d33f5fdc0cb95793ca96f7b8a7127cb9ae6acde7e158bcf718cf30ea69933e
f6cdefa6f9383f8c9735f9510f70f228d299479a257c1a2d3c10d1f47cc1a055
'''.replace('\n', ''), 16)

b = int('''
e5b537e60922d57a763918a5b1e8af1bc07c85fefea11e8179f2a9ee6cf7c611
7d0eba7963617035cf1ddb1f0cc858d70890a76990f96adb29ea8b0403f869cd
be51b76f06c25a9319ecd04366f846338fc1f81ae05f143940039bfbbc4de953
b933c89e74fe62485157d7a3b31993915808a4b95bb768f369818c10edfa561e
3530c999c33ef62a4466ec67622cc12525cf0ea3d402931d16ef115acc172641
a63037190ba04931d3caa2ef861ee7f277647844f8a7f94569f06cea32badb02
82355467cec0bdbdff5e7cd837ffce048925280ab92a9560c1cd6bd309239d7e
72b298af5ad81d27ee9adf7143185815bdadfa21296833149748ed2f55343533
'''.replace('\n', ''), 16) * a


A = b'''
bc69f315c01224ca6778d124281a31f5ffaf7e97ef666f349fb6c6d390e1bd2b
4ece1d956c577f57920ff9a082b6855ea9a99914f21491b4012cad5aecb93c44
c0b1cabd5a7573b53fb6b4a3b7025a19a40c8ced23b93d4d80f189f2c9e94360
cd41bc81dba40b782011adcd4359d4ef1af2d6d71a8c1352090d0b95b84d11e6
c619c27a45db86b76aeb4fa3b4fff12783e20a40fe25bab19ea9221a0c08d960
9b0df26bd6ab5c4b0a26a269407bbdbc630c4e2609c1980cb0ab545097325f7e
e2a37bbdfc3f08b166e50cbe89daabc197385a0d7b59e5b5e1ebb4ebff499959
995611f14faec3531defbbce4c39cd0750fc46699850b82adcc11f31de7172e7
1d45ab686016f181b82c4275ea024d2c68bb073cd0121857cad4cf4846c474ea
a4b970ec1c0280cf6ffc7d6baab06338edef2b00e4201a22798d07ade14fdb18
1959db018acab1cc5ff742d66bb6144e2e568491715c19a985e9592dcdcf93ca
4793a61becb8ead82110b7db361bd2ed11c19c9d6dc30c2d5925cdd7c3a688c5
4ceb08129fcabdf4ac51fcfaeb24647d09c1dff6e427f51b90c9d40902e0f0c2
b28e0dc8f1d382f1bc282629fb082321651019a62d9341e9c4be1c415cbd8397
fdca24617d48127d2f21b9d29800c25876beff87dc6cf6677856e4e8787d8bdb
6219c9a746c64ef18236f12a9137511e84c1df56a98d7e030037579b3f34522d
'''.replace(b'\n', b'')

#A = b'bed299f5e2a89501df0b6097906476d21d5672e64bd522acc3a56c770a0fd40b88841a16cb85869c25334aeeac500e8a66996fe397aa8ed19f55dfb523cea95263f9e60903c45ff23fdd7a8c6202a2d52e7fa5ac16994c475398182019c0b8d0979a91e90715da1fd58c349a144286c591238f0ef9093a716b53ce516aa7ab46e96b53629bce3be6b1c237dd235bfd4d7cfc31f7eb572e1875c877379c4b5d34acf737ebf0e177d5762567145c06170f1caa3bbf60d17fd4b4955492424b609bd3dc0273eac9e42d325d2f0020d9bec799aa418679314e19bfe0ef12238fd67bb2482ddc38113386bef13c6a18d74b1af787c776b90c65a644a58e871bb66208b2f60ed527640887bee4811a3b8bf3a332e68dacbb7f38c02f165f7e15619b5981c4fb341ce501d1af528e2a0e52081767a22829a673225d80907a1e7878a39b1f91a1cacd077744d0ca6dfa1da99ca6467e07a1a81e8841c408c818f9ffa85a41d46dad06ed1c56326ab1a72af4a531d82edb498cfb656a8308ea58fbe10de59d248494f3e6802069d00ecf2bce6345601893fe06186a759fad8fd9f7332c416452eba7ae14bf073919a542e290f2d2b2ab476e5e2a833f751effaff4077c4ad3293bfad487af29e2767643183dd7e053663b56f0ef3b7f3323d78abfcd8689d383804b5b8758ca611ceab7fd674903b2d3150efb3721c47c360a3659ccd462'

K = hex(a).encode('ascii')
k = struct.unpack("<4L", K[:16])
m = binascii.a2b_hex(A)
m = list(m)

sum = [0]
delta, mask = 0x9e3779b9, 0xffffffff
for round in range(32):
    sum.append((sum[round] + delta) & mask)


for i in range(504, -8, -8):
    v0, v1 = struct.unpack("<2L", bytes(m[i:i+8]))
    for round in range(31, -1, -1):
        v1 = (v1 - (((v0 << 4 ^ v0 >> 5) + v0) ^ (sum[round+1] + k[sum[round+1] >> 11 & 3]))) & mask
        v0 = (v0 - (((v1 << 4 ^ v1 >> 5) + v1) ^ (sum[round] + k[sum[round] & 3]))) & mask
    e = struct.pack("<2L", v0, v1)
    for j in range(7, -1, -1):
        m[i+j] = e[j]
S = [197, 17, 67, 186, 195, 235, 42, 220, 138, 243, 71, 139, 156, 95, 99, 170, 175, 160, 31, 120, 84, 176, 91, 19, 242, 3, 141, 28, 212, 154, 250, 109, 104, 208, 171, 245, 224, 222, 198, 153, 146, 45, 38, 226, 101, 164, 231, 9, 111, 13, 180, 66, 92, 145, 44, 227, 1, 59, 113, 16, 48, 199, 163, 127, 51, 64, 172, 158, 233, 41, 100, 255, 129, 43, 240, 134, 133, 88, 181, 76, 174, 223, 82, 167, 247, 94, 39, 75, 184, 237, 123, 33, 221, 4, 150, 117, 206, 126, 15, 0, 24, 52, 183, 192, 230, 219, 121, 55, 105, 125, 72, 110, 149, 201, 151, 35, 147, 207, 202, 162, 131, 49, 37, 119, 179, 173, 8, 86, 251, 85, 57, 161, 152, 190, 130, 36, 69, 118, 107, 248, 77, 213, 210, 136, 46, 7, 155, 27, 168, 169, 137, 225, 47, 50, 20, 196, 253, 135, 241, 182, 22, 97, 204, 209, 128, 103, 96, 61, 188, 205, 166, 89, 26, 216, 185, 34, 238, 177, 87, 191, 56, 193, 229, 112, 244, 143, 189, 32, 142, 11, 115, 124, 157, 114, 102, 187, 6, 178, 23, 159, 30, 18, 2, 93, 144, 140, 40, 63, 132, 211, 98, 203, 228, 78, 79, 122, 54, 217, 194, 90, 29, 14, 21, 108, 232, 73, 218, 58, 60, 68, 106, 200, 252, 239, 74, 234, 65, 214, 83, 116, 53, 148, 25, 236, 62, 215, 10, 249, 81, 80, 254, 5, 246, 12, 165, 70]
i = 0
j = 77
gg = 256
for k in range(511, -1, -1):
    m[k] ^= S[(S[i] + S[j]) % gg]
    S[i], S[j] = S[j], S[i]
    j = j + gg - S[i]
    if j >= gg:
        j -= gg
    if j < 0:
        j += gg
    i = i - 1
    if i < 0:
        i += gg
#j = 21
# for i in range(255, -1, -1):
    # S[i], S[j] = S[j], S[i]
    # j = j + gg - S[i] - K[i % len(K)]
    # if j >= gg:
        # j -= gg
    # if j < 0:
        # j += gg
#print(S)
m = binascii.hexlify(bytes(m))
m = int(bytes.decode(m), 16)

def egcd(a, b):
    x0, x1, y0, y1 = 1, 0, 0, 1
    while b != 0:
        q, a, b = a // b, b, a % b
        x0, x1 = x1, x0 - q * x1
        y0, y1 = y1, y0 - q * y1
    return a, x0, y0


def inverse(a, n):
    d, a_inv, n_inv = egcd(a, n)
    if d != 1:
        raise ZeroDivisionError('{} is not coprime to {}'.format(a, n))
    else:
        return a_inv % n
d = inverse(65537, (a-1)*(b//a-1))
m = pow(m, d, b)
m = hex(m)[2:]
for i in range(0, 544, 32):
    for j in range(32, 127):
        if m[i:i+32] == md5(chr(j)):
            print(chr(j), end='')
        
